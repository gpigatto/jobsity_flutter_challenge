///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class SearchShowModelObjectListShowLinksPreviousepisode {
/*
{
  "href": "https://api.tvmaze.com/episodes/1079686"
} 
*/

  String? href;

  SearchShowModelObjectListShowLinksPreviousepisode({
    this.href,
  });
  SearchShowModelObjectListShowLinksPreviousepisode.fromJson(
      Map<String, dynamic> json) {
    href = json["href"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["href"] = href;
    return data;
  }
}

class SearchShowModelObjectListShowLinksSelf {
/*
{
  "href": "https://api.tvmaze.com/shows/139"
} 
*/

  String? href;

  SearchShowModelObjectListShowLinksSelf({
    this.href,
  });
  SearchShowModelObjectListShowLinksSelf.fromJson(Map<String, dynamic> json) {
    href = json["href"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["href"] = href;
    return data;
  }
}

class SearchShowModelObjectListShowLinks {
/*
{
  "self": {
    "href": "https://api.tvmaze.com/shows/139"
  },
  "previousepisode": {
    "href": "https://api.tvmaze.com/episodes/1079686"
  }
} 
*/

  SearchShowModelObjectListShowLinksSelf? self;
  SearchShowModelObjectListShowLinksPreviousepisode? previousepisode;

  SearchShowModelObjectListShowLinks({
    this.self,
    this.previousepisode,
  });
  SearchShowModelObjectListShowLinks.fromJson(Map<String, dynamic> json) {
    self = (json["self"] != null)
        ? SearchShowModelObjectListShowLinksSelf.fromJson(json["self"])
        : null;
    previousepisode = (json["previousepisode"] != null)
        ? SearchShowModelObjectListShowLinksPreviousepisode.fromJson(
            json["previousepisode"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (self != null) {
      data["self"] = self!.toJson();
    }
    if (previousepisode != null) {
      data["previousepisode"] = previousepisode!.toJson();
    }
    return data;
  }
}

class SearchShowModelObjectListShowImage {
/*
{
  "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/31/78286.jpg",
  "original": "https://static.tvmaze.com/uploads/images/original_untouched/31/78286.jpg"
} 
*/

  String? medium;
  String? original;

  SearchShowModelObjectListShowImage({
    this.medium,
    this.original,
  });
  SearchShowModelObjectListShowImage.fromJson(Map<String, dynamic> json) {
    medium = json["medium"]?.toString();
    original = json["original"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["medium"] = medium;
    data["original"] = original;
    return data;
  }
}

class SearchShowModelObjectListShowExternals {
/*
{
  "tvrage": 30124,
  "thetvdb": 220411,
  "imdb": "tt1723816"
} 
*/

  int? tvrage;
  int? thetvdb;
  String? imdb;

  SearchShowModelObjectListShowExternals({
    this.tvrage,
    this.thetvdb,
    this.imdb,
  });
  SearchShowModelObjectListShowExternals.fromJson(Map<String, dynamic> json) {
    tvrage = json["tvrage"]?.toInt();
    thetvdb = json["thetvdb"]?.toInt();
    imdb = json["imdb"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["tvrage"] = tvrage;
    data["thetvdb"] = thetvdb;
    data["imdb"] = imdb;
    return data;
  }
}

class SearchShowModelObjectListShowNetworkCountry {
/*
{
  "name": "United States",
  "code": "US",
  "timezone": "America/New_York"
} 
*/

  String? name;
  String? code;
  String? timezone;

  SearchShowModelObjectListShowNetworkCountry({
    this.name,
    this.code,
    this.timezone,
  });
  SearchShowModelObjectListShowNetworkCountry.fromJson(
      Map<String, dynamic> json) {
    name = json["name"]?.toString();
    code = json["code"]?.toString();
    timezone = json["timezone"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["code"] = code;
    data["timezone"] = timezone;
    return data;
  }
}

class SearchShowModelObjectListShowNetwork {
/*
{
  "id": 8,
  "name": "HBO",
  "country": {
    "name": "United States",
    "code": "US",
    "timezone": "America/New_York"
  }
} 
*/

  int? id;
  String? name;
  SearchShowModelObjectListShowNetworkCountry? country;

  SearchShowModelObjectListShowNetwork({
    this.id,
    this.name,
    this.country,
  });
  SearchShowModelObjectListShowNetwork.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
    country = (json["country"] != null)
        ? SearchShowModelObjectListShowNetworkCountry.fromJson(json["country"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    if (country != null) {
      data["country"] = country!.toJson();
    }
    return data;
  }
}

class SearchShowModelObjectListShowRating {
/*
{
  "average": 6.6
} 
*/

  double? average;

  SearchShowModelObjectListShowRating({
    this.average,
  });
  SearchShowModelObjectListShowRating.fromJson(Map<String, dynamic> json) {
    average = json["average"]?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["average"] = average;
    return data;
  }
}

class SearchShowModelObjectListShowSchedule {
/*
{
  "time": "22:00",
  "days": [
    "Sunday"
  ]
} 
*/

  String? time;
  List<String?>? days;

  SearchShowModelObjectListShowSchedule({
    this.time,
    this.days,
  });
  SearchShowModelObjectListShowSchedule.fromJson(Map<String, dynamic> json) {
    time = json["time"]?.toString();
    if (json["days"] != null) {
      final v = json["days"];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      days = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["time"] = time;
    if (days != null) {
      final v = days;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data["days"] = arr0;
    }
    return data;
  }
}

class SearchShowModelObjectListShow {
/*
{
  "id": 139,
  "url": "https://www.tvmaze.com/shows/139/girls",
  "name": "Girls",
  "type": "Scripted",
  "language": "English",
  "genres": [
    "Drama"
  ],
  "status": "Ended",
  "runtime": 30,
  "averageRuntime": 30,
  "premiered": "2012-04-15",
  "ended": "2017-04-16",
  "officialSite": "http://www.hbo.com/girls",
  "schedule": {
    "time": "22:00",
    "days": [
      "Sunday"
    ]
  },
  "rating": {
    "average": 6.6
  },
  "weight": 97,
  "network": {
    "id": 8,
    "name": "HBO",
    "country": {
      "name": "United States",
      "code": "US",
      "timezone": "America/New_York"
    }
  },
  "webChannel": null,
  "dvdCountry": null,
  "externals": {
    "tvrage": 30124,
    "thetvdb": 220411,
    "imdb": "tt1723816"
  },
  "image": {
    "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/31/78286.jpg",
    "original": "https://static.tvmaze.com/uploads/images/original_untouched/31/78286.jpg"
  },
  "summary": "<p>This Emmy winning series is a comic look at the assorted humiliations and rare triumphs of a group of girls in their 20s.</p>",
  "updated": 1611310521,
  "_links": {
    "self": {
      "href": "https://api.tvmaze.com/shows/139"
    },
    "previousepisode": {
      "href": "https://api.tvmaze.com/episodes/1079686"
    }
  }
} 
*/

  int? id;
  String? url;
  String? name;
  String? type;
  String? language;
  List<String?>? genres;
  String? status;
  int? runtime;
  int? averageRuntime;
  String? premiered;
  String? ended;
  String? officialSite;
  SearchShowModelObjectListShowSchedule? schedule;
  SearchShowModelObjectListShowRating? rating;
  int? weight;
  SearchShowModelObjectListShowNetwork? network;
  String? webChannel;
  String? dvdCountry;
  SearchShowModelObjectListShowExternals? externals;
  SearchShowModelObjectListShowImage? image;
  String? summary;
  int? updated;
  SearchShowModelObjectListShowLinks? Links;

  SearchShowModelObjectListShow({
    this.id,
    this.url,
    this.name,
    this.type,
    this.language,
    this.genres,
    this.status,
    this.runtime,
    this.averageRuntime,
    this.premiered,
    this.ended,
    this.officialSite,
    this.schedule,
    this.rating,
    this.weight,
    this.network,
    this.webChannel,
    this.dvdCountry,
    this.externals,
    this.image,
    this.summary,
    this.updated,
    this.Links,
  });
  SearchShowModelObjectListShow.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    url = json["url"]?.toString();
    name = json["name"]?.toString();
    type = json["type"]?.toString();
    language = json["language"]?.toString();
    if (json["genres"] != null) {
      final v = json["genres"];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      genres = arr0;
    }
    status = json["status"]?.toString();
    runtime = json["runtime"]?.toInt();
    averageRuntime = json["averageRuntime"]?.toInt();
    premiered = json["premiered"]?.toString();
    ended = json["ended"]?.toString();
    officialSite = json["officialSite"]?.toString();
    schedule = (json["schedule"] != null)
        ? SearchShowModelObjectListShowSchedule.fromJson(json["schedule"])
        : null;
    rating = (json["rating"] != null)
        ? SearchShowModelObjectListShowRating.fromJson(json["rating"])
        : null;
    weight = json["weight"]?.toInt();
    network = (json["network"] != null)
        ? SearchShowModelObjectListShowNetwork.fromJson(json["network"])
        : null;
    webChannel = json["webChannel"]?.toString();
    dvdCountry = json["dvdCountry"]?.toString();
    externals = (json["externals"] != null)
        ? SearchShowModelObjectListShowExternals.fromJson(json["externals"])
        : null;
    image = (json["image"] != null)
        ? SearchShowModelObjectListShowImage.fromJson(json["image"])
        : null;
    summary = json["summary"]?.toString();
    updated = json["updated"]?.toInt();
    Links = (json["_links"] != null)
        ? SearchShowModelObjectListShowLinks.fromJson(json["_links"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["url"] = url;
    data["name"] = name;
    data["type"] = type;
    data["language"] = language;
    if (genres != null) {
      final v = genres;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data["genres"] = arr0;
    }
    data["status"] = status;
    data["runtime"] = runtime;
    data["averageRuntime"] = averageRuntime;
    data["premiered"] = premiered;
    data["ended"] = ended;
    data["officialSite"] = officialSite;
    if (schedule != null) {
      data["schedule"] = schedule!.toJson();
    }
    if (rating != null) {
      data["rating"] = rating!.toJson();
    }
    data["weight"] = weight;
    if (network != null) {
      data["network"] = network!.toJson();
    }
    data["webChannel"] = webChannel;
    data["dvdCountry"] = dvdCountry;
    if (externals != null) {
      data["externals"] = externals!.toJson();
    }
    if (image != null) {
      data["image"] = image!.toJson();
    }
    data["summary"] = summary;
    data["updated"] = updated;
    if (Links != null) {
      data["_links"] = Links!.toJson();
    }
    return data;
  }
}

class SearchShowModelObjectList {
/*
{
  "score": 0.90979844,
  "show": {
    "id": 139,
    "url": "https://www.tvmaze.com/shows/139/girls",
    "name": "Girls",
    "type": "Scripted",
    "language": "English",
    "genres": [
      "Drama"
    ],
    "status": "Ended",
    "runtime": 30,
    "averageRuntime": 30,
    "premiered": "2012-04-15",
    "ended": "2017-04-16",
    "officialSite": "http://www.hbo.com/girls",
    "schedule": {
      "time": "22:00",
      "days": [
        "Sunday"
      ]
    },
    "rating": {
      "average": 6.6
    },
    "weight": 97,
    "network": {
      "id": 8,
      "name": "HBO",
      "country": {
        "name": "United States",
        "code": "US",
        "timezone": "America/New_York"
      }
    },
    "webChannel": null,
    "dvdCountry": null,
    "externals": {
      "tvrage": 30124,
      "thetvdb": 220411,
      "imdb": "tt1723816"
    },
    "image": {
      "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/31/78286.jpg",
      "original": "https://static.tvmaze.com/uploads/images/original_untouched/31/78286.jpg"
    },
    "summary": "<p>This Emmy winning series is a comic look at the assorted humiliations and rare triumphs of a group of girls in their 20s.</p>",
    "updated": 1611310521,
    "_links": {
      "self": {
        "href": "https://api.tvmaze.com/shows/139"
      },
      "previousepisode": {
        "href": "https://api.tvmaze.com/episodes/1079686"
      }
    }
  }
} 
*/

  double? score;
  SearchShowModelObjectListShow? theShow;

  SearchShowModelObjectList({
    this.score,
    this.theShow,
  });
  SearchShowModelObjectList.fromJson(Map<String, dynamic> json) {
    score = json["score"]?.toDouble();
    theShow = (json["show"] != null)
        ? SearchShowModelObjectListShow.fromJson(json["show"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["score"] = score;
    if (theShow != null) {
      data["show"] = theShow!.toJson();
    }
    return data;
  }
}

class SearchShowModel {
/*
{
  "ObjectList": [
    {
      "score": 0.90979844,
      "show": {
        "id": 139,
        "url": "https://www.tvmaze.com/shows/139/girls",
        "name": "Girls",
        "type": "Scripted",
        "language": "English",
        "genres": [
          "Drama"
        ],
        "status": "Ended",
        "runtime": 30,
        "averageRuntime": 30,
        "premiered": "2012-04-15",
        "ended": "2017-04-16",
        "officialSite": "http://www.hbo.com/girls",
        "schedule": {
          "time": "22:00",
          "days": [
            "Sunday"
          ]
        },
        "rating": {
          "average": 6.6
        },
        "weight": 97,
        "network": {
          "id": 8,
          "name": "HBO",
          "country": {
            "name": "United States",
            "code": "US",
            "timezone": "America/New_York"
          }
        },
        "webChannel": null,
        "dvdCountry": null,
        "externals": {
          "tvrage": 30124,
          "thetvdb": 220411,
          "imdb": "tt1723816"
        },
        "image": {
          "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/31/78286.jpg",
          "original": "https://static.tvmaze.com/uploads/images/original_untouched/31/78286.jpg"
        },
        "summary": "<p>This Emmy winning series is a comic look at the assorted humiliations and rare triumphs of a group of girls in their 20s.</p>",
        "updated": 1611310521,
        "_links": {
          "self": {
            "href": "https://api.tvmaze.com/shows/139"
          },
          "previousepisode": {
            "href": "https://api.tvmaze.com/episodes/1079686"
          }
        }
      }
    }
  ]
} 
*/

  List<SearchShowModelObjectList?>? ObjectList;

  SearchShowModel({
    this.ObjectList,
  });
  SearchShowModel.fromJson(Map<String, dynamic> json) {
    if (json["ObjectList"] != null) {
      final v = json["ObjectList"];
      final arr0 = <SearchShowModelObjectList>[];
      v.forEach((v) {
        arr0.add(SearchShowModelObjectList.fromJson(v));
      });
      ObjectList = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (ObjectList != null) {
      final v = ObjectList;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["ObjectList"] = arr0;
    }
    return data;
  }
}
