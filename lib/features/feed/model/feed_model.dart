///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class FeedModelObjectListLinksPreviousepisode {
/*
{
  "href": "https://api.tvmaze.com/episodes/185054"
} 
*/

  String? href;

  FeedModelObjectListLinksPreviousepisode({
    this.href,
  });
  FeedModelObjectListLinksPreviousepisode.fromJson(Map<String, dynamic> json) {
    href = json["href"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["href"] = href;
    return data;
  }
}

class FeedModelObjectListLinksSelf {
/*
{
  "href": "https://api.tvmaze.com/shows/1"
} 
*/

  String? href;

  FeedModelObjectListLinksSelf({
    this.href,
  });
  FeedModelObjectListLinksSelf.fromJson(Map<String, dynamic> json) {
    href = json["href"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["href"] = href;
    return data;
  }
}

class FeedModelObjectListLinks {
/*
{
  "self": {
    "href": "https://api.tvmaze.com/shows/1"
  },
  "previousepisode": {
    "href": "https://api.tvmaze.com/episodes/185054"
  }
} 
*/

  FeedModelObjectListLinksSelf? self;
  FeedModelObjectListLinksPreviousepisode? previousepisode;

  FeedModelObjectListLinks({
    this.self,
    this.previousepisode,
  });
  FeedModelObjectListLinks.fromJson(Map<String, dynamic> json) {
    self = (json["self"] != null)
        ? FeedModelObjectListLinksSelf.fromJson(json["self"])
        : null;
    previousepisode = (json["previousepisode"] != null)
        ? FeedModelObjectListLinksPreviousepisode.fromJson(
            json["previousepisode"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (self != null) {
      data["self"] = self!.toJson();
    }
    if (previousepisode != null) {
      data["previousepisode"] = previousepisode!.toJson();
    }
    return data;
  }
}

class FeedModelObjectListImage {
/*
{
  "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/81/202627.jpg",
  "original": "https://static.tvmaze.com/uploads/images/original_untouched/81/202627.jpg"
} 
*/

  String? medium;
  String? original;

  FeedModelObjectListImage({
    this.medium,
    this.original,
  });
  FeedModelObjectListImage.fromJson(Map<String, dynamic> json) {
    medium = json["medium"]?.toString();
    original = json["original"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["medium"] = medium;
    data["original"] = original;
    return data;
  }
}

class FeedModelObjectListExternals {
/*
{
  "tvrage": 25988,
  "thetvdb": 264492,
  "imdb": "tt1553656"
} 
*/

  int? tvrage;
  int? thetvdb;
  String? imdb;

  FeedModelObjectListExternals({
    this.tvrage,
    this.thetvdb,
    this.imdb,
  });
  FeedModelObjectListExternals.fromJson(Map<String, dynamic> json) {
    tvrage = json["tvrage"]?.toInt();
    thetvdb = json["thetvdb"]?.toInt();
    imdb = json["imdb"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["tvrage"] = tvrage;
    data["thetvdb"] = thetvdb;
    data["imdb"] = imdb;
    return data;
  }
}

class FeedModelObjectListNetworkCountry {
/*
{
  "name": "United States",
  "code": "US",
  "timezone": "America/New_York"
} 
*/

  String? name;
  String? code;
  String? timezone;

  FeedModelObjectListNetworkCountry({
    this.name,
    this.code,
    this.timezone,
  });
  FeedModelObjectListNetworkCountry.fromJson(Map<String, dynamic> json) {
    name = json["name"]?.toString();
    code = json["code"]?.toString();
    timezone = json["timezone"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["name"] = name;
    data["code"] = code;
    data["timezone"] = timezone;
    return data;
  }
}

class FeedModelObjectListNetwork {
/*
{
  "id": 2,
  "name": "CBS",
  "country": {
    "name": "United States",
    "code": "US",
    "timezone": "America/New_York"
  }
} 
*/

  int? id;
  String? name;
  FeedModelObjectListNetworkCountry? country;

  FeedModelObjectListNetwork({
    this.id,
    this.name,
    this.country,
  });
  FeedModelObjectListNetwork.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    name = json["name"]?.toString();
    country = (json["country"] != null)
        ? FeedModelObjectListNetworkCountry.fromJson(json["country"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["name"] = name;
    if (country != null) {
      data["country"] = country!.toJson();
    }
    return data;
  }
}

class FeedModelObjectListRating {
/*
{
  "average": 6.5
} 
*/

  double? average;

  FeedModelObjectListRating({
    this.average,
  });
  FeedModelObjectListRating.fromJson(Map<String, dynamic> json) {
    average = json["average"]?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["average"] = average;
    return data;
  }
}

class FeedModelObjectListSchedule {
/*
{
  "time": "22:00",
  "days": [
    "Thursday"
  ]
} 
*/

  String? time;
  List<String?>? days;

  FeedModelObjectListSchedule({
    this.time,
    this.days,
  });
  FeedModelObjectListSchedule.fromJson(Map<String, dynamic> json) {
    time = json["time"]?.toString();
    if (json["days"] != null) {
      final v = json["days"];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      days = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["time"] = time;
    if (days != null) {
      final v = days;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data["days"] = arr0;
    }
    return data;
  }
}

class FeedModelObjectList {
/*
{
  "id": 1,
  "url": "https://www.tvmaze.com/shows/1/under-the-dome",
  "name": "Under the Dome",
  "type": "Scripted",
  "language": "English",
  "genres": [
    "Drama"
  ],
  "status": "Ended",
  "runtime": 60,
  "averageRuntime": 60,
  "premiered": "2013-06-24",
  "ended": "2015-09-10",
  "officialSite": "http://www.cbs.com/shows/under-the-dome/",
  "schedule": {
    "time": "22:00",
    "days": [
      "Thursday"
    ]
  },
  "rating": {
    "average": 6.5
  },
  "weight": 98,
  "network": {
    "id": 2,
    "name": "CBS",
    "country": {
      "name": "United States",
      "code": "US",
      "timezone": "America/New_York"
    }
  },
  "webChannel": null,
  "dvdCountry": null,
  "externals": {
    "tvrage": 25988,
    "thetvdb": 264492,
    "imdb": "tt1553656"
  },
  "image": {
    "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/81/202627.jpg",
    "original": "https://static.tvmaze.com/uploads/images/original_untouched/81/202627.jpg"
  },
  "summary": "<p><b>Under the Dome</b> is the story of a small town that is suddenly and inexplicably sealed off from the rest of the world by an enormous transparent dome. The town's inhabitants must deal with surviving the post-apocalyptic conditions while searching for answers about the dome, where it came from and if and when it will go away.</p>",
  "updated": 1631010933,
  "_links": {
    "self": {
      "href": "https://api.tvmaze.com/shows/1"
    },
    "previousepisode": {
      "href": "https://api.tvmaze.com/episodes/185054"
    }
  }
} 
*/

  int? id;
  String? url;
  String? name;
  String? type;
  String? language;
  List<String?>? genres;
  String? status;
  int? runtime;
  int? averageRuntime;
  String? premiered;
  String? ended;
  String? officialSite;
  FeedModelObjectListSchedule? schedule;
  FeedModelObjectListRating? rating;
  int? weight;
  FeedModelObjectListNetwork? network;
  String? webChannel;
  String? dvdCountry;
  FeedModelObjectListExternals? externals;
  FeedModelObjectListImage? image;
  String? summary;
  int? updated;
  FeedModelObjectListLinks? Links;

  FeedModelObjectList({
    this.id,
    this.url,
    this.name,
    this.type,
    this.language,
    this.genres,
    this.status,
    this.runtime,
    this.averageRuntime,
    this.premiered,
    this.ended,
    this.officialSite,
    this.schedule,
    this.rating,
    this.weight,
    this.network,
    this.webChannel,
    this.dvdCountry,
    this.externals,
    this.image,
    this.summary,
    this.updated,
    this.Links,
  });
  FeedModelObjectList.fromJson(Map<String, dynamic> json) {
    id = json["id"]?.toInt();
    url = json["url"]?.toString();
    name = json["name"]?.toString();
    type = json["type"]?.toString();
    language = json["language"]?.toString();
    if (json["genres"] != null) {
      final v = json["genres"];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      genres = arr0;
    }
    status = json["status"]?.toString();
    runtime = json["runtime"]?.toInt();
    averageRuntime = json["averageRuntime"]?.toInt();
    premiered = json["premiered"]?.toString();
    ended = json["ended"]?.toString();
    officialSite = json["officialSite"]?.toString();
    schedule = (json["schedule"] != null)
        ? FeedModelObjectListSchedule.fromJson(json["schedule"])
        : null;
    rating = (json["rating"] != null)
        ? FeedModelObjectListRating.fromJson(json["rating"])
        : null;
    weight = json["weight"]?.toInt();
    network = (json["network"] != null)
        ? FeedModelObjectListNetwork.fromJson(json["network"])
        : null;
    webChannel = json["webChannel"]?.toString();
    dvdCountry = json["dvdCountry"]?.toString();
    externals = (json["externals"] != null)
        ? FeedModelObjectListExternals.fromJson(json["externals"])
        : null;
    image = (json["image"] != null)
        ? FeedModelObjectListImage.fromJson(json["image"])
        : null;
    summary = json["summary"]?.toString();
    updated = json["updated"]?.toInt();
    Links = (json["_links"] != null)
        ? FeedModelObjectListLinks.fromJson(json["_links"])
        : null;
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["id"] = id;
    data["url"] = url;
    data["name"] = name;
    data["type"] = type;
    data["language"] = language;
    if (genres != null) {
      final v = genres;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data["genres"] = arr0;
    }
    data["status"] = status;
    data["runtime"] = runtime;
    data["averageRuntime"] = averageRuntime;
    data["premiered"] = premiered;
    data["ended"] = ended;
    data["officialSite"] = officialSite;
    if (schedule != null) {
      data["schedule"] = schedule!.toJson();
    }
    if (rating != null) {
      data["rating"] = rating!.toJson();
    }
    data["weight"] = weight;
    if (network != null) {
      data["network"] = network!.toJson();
    }
    data["webChannel"] = webChannel;
    data["dvdCountry"] = dvdCountry;
    if (externals != null) {
      data["externals"] = externals!.toJson();
    }
    if (image != null) {
      data["image"] = image!.toJson();
    }
    data["summary"] = summary;
    data["updated"] = updated;
    if (Links != null) {
      data["_links"] = Links!.toJson();
    }
    return data;
  }
}

class FeedModel {
/*
{
  "ObjectList": [
    {
      "id": 1,
      "url": "https://www.tvmaze.com/shows/1/under-the-dome",
      "name": "Under the Dome",
      "type": "Scripted",
      "language": "English",
      "genres": [
        "Drama"
      ],
      "status": "Ended",
      "runtime": 60,
      "averageRuntime": 60,
      "premiered": "2013-06-24",
      "ended": "2015-09-10",
      "officialSite": "http://www.cbs.com/shows/under-the-dome/",
      "schedule": {
        "time": "22:00",
        "days": [
          "Thursday"
        ]
      },
      "rating": {
        "average": 6.5
      },
      "weight": 98,
      "network": {
        "id": 2,
        "name": "CBS",
        "country": {
          "name": "United States",
          "code": "US",
          "timezone": "America/New_York"
        }
      },
      "webChannel": null,
      "dvdCountry": null,
      "externals": {
        "tvrage": 25988,
        "thetvdb": 264492,
        "imdb": "tt1553656"
      },
      "image": {
        "medium": "https://static.tvmaze.com/uploads/images/medium_portrait/81/202627.jpg",
        "original": "https://static.tvmaze.com/uploads/images/original_untouched/81/202627.jpg"
      },
      "summary": "<p><b>Under the Dome</b> is the story of a small town that is suddenly and inexplicably sealed off from the rest of the world by an enormous transparent dome. The town's inhabitants must deal with surviving the post-apocalyptic conditions while searching for answers about the dome, where it came from and if and when it will go away.</p>",
      "updated": 1631010933,
      "_links": {
        "self": {
          "href": "https://api.tvmaze.com/shows/1"
        },
        "previousepisode": {
          "href": "https://api.tvmaze.com/episodes/185054"
        }
      }
    }
  ]
} 
*/

  List<FeedModelObjectList?>? ObjectList;

  FeedModel({
    this.ObjectList,
  });
  FeedModel.fromJson(Map<String, dynamic> json) {
    if (json["ObjectList"] != null) {
      final v = json["ObjectList"];
      final arr0 = <FeedModelObjectList>[];
      v.forEach((v) {
        arr0.add(FeedModelObjectList.fromJson(v));
      });
      ObjectList = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (ObjectList != null) {
      final v = ObjectList;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["ObjectList"] = arr0;
    }
    return data;
  }
}
